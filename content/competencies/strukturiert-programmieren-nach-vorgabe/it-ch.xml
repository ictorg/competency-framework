<?xml version="1.0" encoding="UTF-8"?>
<competency xmlns="https://ictorg.ch/competency" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://ictorg.ch/competency ../../../schema/competency.xsd">
    <meta>
        <provider name="ICT-Berufsbildung">
            <id>103</id>
            <reference>https://cf.ict-berufsbildung.ch/modules.php?name=Mbk%26a=20101%26cmodnr=103%26clang=it</reference>
            <level>1</level>
            <lessons>80</lessons>
            <achnowledgment>Eidg. Fähigkeitszeugnis</achnowledgment>
        </provider>
    </meta>
    <title>Programmare in modo strutturato in base ad un quaderno dei compiti</title>
    <capability>Elaborare, testare e documentare un programma in maniera strutturata sulla base di un quaderno dei compiti.</capability>
    <goals>
        <goal>
            Rappresentare un processo d’elaborazione predefinito sotto forma di un diagramma di flusso (Jackson, Nassi Shneidermann etc.).
            <knowledge-list>
                <knowledge>
                    Conosce le principali strutture di controllo della programmazione strutturata (sequenza, selezione, iterazione) e sa spiegare per mezzo di esempi a quali situazioni esse corrispondono nel funzionamento di un algoritmo.
                </knowledge>
                <knowledge>
                    Conosce una notazione per la rappresentazione di una logica di programma (Jackson, Nassi Shneidermann, PAP, etc.) e sa spiegare come vi sono riprodotte le principali strutture di controllo e il funzionamento di un programma.
                </knowledge>
            </knowledge-list>
        </goal>
        <goal>
            Definire i dati e determinare i tipi di dati che sono necessari per una elaborazione predefinita (entrata, uscita).
            <knowledge-list>
                <knowledge>
                    Conosce i principali tipi di dati (numero intero, virgola mobile, carattere/stringa) e sa indicare a quali generi di dati o d’informazione essi corrispondono.
                </knowledge>
                <knowledge>
                    Conosce le regole (implicite ed esplicite) che vengono utilizzate nella conversione di tipi di dati e sa indicare quali effetti hanno per quel che concerne la precisione ed il significato.
                </knowledge>
            </knowledge-list>
        </goal>
        <goal>
            Trasporre il diagramma di flusso e i dati in un programma con un linguaggio di programmazione.
            <knowledge-list>
                <knowledge>
                    Conosce la struttura fondamentale di un programma (posizione della dichiarazione ed elaborazione, etc.) e sa illustrarla attraverso un esempio.
                </knowledge>
                <knowledge>
                    Conosce i comandi di base di un linguaggio di programmazione (strutture di controllo, operatori) e sa indicare quali istruzioni d’elaborazione esse permettono di realizzare.
                </knowledge>
            </knowledge-list>
        </goal>
        <goal>
            Elaborare comprensibilmente il codice sorgente (nomi di variabile, struttura, commenti), in modo da garantire la riproducibilità del programma.
            <knowledge-list>
                <knowledge>
                    Conosce le principali possibilità di strutturazione (per es. indentazione delle strutture di controllo annidate) e sa spiegare come esse contribuiscono a migliorare la leggibilità dei programmi.
                </knowledge>
                <knowledge>
                    Conosce le principali regole da rispettare in modo che un codice sorgente sia comprensibile (nomi di variabili espliciti, commenti adeguati) e sa spiegare come esse contribuiscono a migliorare la leggibilità dei programmi.
                </knowledge>
            </knowledge-list>
        </goal>
        <goal>
            Elaborare un’interfaccia utente per l’introduzione e la visualizzazione dei dati.
            <knowledge-list>
                <knowledge>
                    Conosce le principali regole da rispettare per l’introduzione e la visualizzazione di dati sullo schermo (indicazione delle informazioni, formato d’introduzione, etc.) e sa spiegare quali problemi sorgono quando esse non vengono rispettate.
                </knowledge>
            </knowledge-list>
        </goal>
        <goal>
            Definire i casi di test (valori d’entrata, risultati attesi), in modo da garantire un’elaborazione priva d’errori del programma.
            <knowledge-list>
                <knowledge>
                    Conosce i principali metodi (per es. creazione di classi d’equivalenza) utilizzati per la definizione di casi e di dati di test e sa indicare in quale misura essi permettono di stabilire che un programma elabora le informazioni in maniera corretta ed esaustiva.
                </knowledge>
            </knowledge-list>
        </goal>
    </goals>
</competency>
